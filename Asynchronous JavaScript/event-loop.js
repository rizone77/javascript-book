// // // // // console.log('start');

// // // // // setTimeout(()=>{
// // // // //     console.log('timeout 1');
// // // // // }, 5000);

// // // // // setTimeout(()=>{
// // // // //     console.log('timeout 2')
// // // // // }, 500);

// // // // // // console.log('end')

// // // // ржЗржнрзЗржирзНржЯ рж▓рзБржк ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ, ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░ред 
// // // ржПржХржЯрж╛ рж▓рзБржк ржХржирзНржЯрж┐ржирж┐ржЙрзЯрж╛рж╕рж▓рж┐ ржЪрж▓рждрзЗ ржерж╛ржХрзЗ, ржЖрж░ ржмрж╛рж░ржмрж╛рж░ ржЪрзЗржХ ржХрж░рзЗ, Call Stack ржЦрж╛рж▓рж┐ ржЖржЫрзЗ ржХрж┐ ржирж╛ред ржпржжрж┐ ржЦрж╛рж▓рж┐ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ рж╕рзЗ ржХрж▓рж╕рзНржЯрзНржпрж╛ржХрзЗрж░ ржХрж╛ржЬ ржХрж░рзЗред ржЖрж░ ржпржжрж┐ ржХрж▓рж╕рзНржЯрзНржпрж╛ржХ ржЦрж╛рж▓рж┐ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ Callback Queue ржерзЗржХрзЗ ржХрж╛ржЬ ржирж┐рзЯрзЗ Call Stack-ржП ржкрж╛ржарж╛рзЯред ржЖрж░ ржЗржнрзЗржирзНржЯ ржХрж┐ржЙрждрзЗржУ ржпржжрж┐ ржХрж╛ржЬ ржирж╛ ржерж╛ржХрзЗ, рждржЦржи ржЖрж░ ржХрзА ржХрж░ржмрзЗ? ржЪрзБржкржЪрж╛ржк ржмрж╕рзЗ ржмрж╕рзЗ ржорзБрзЬрж┐ ржЦрж╛рзЯред 
 
// // // //  call stack ржЖрж░ callback queue-ржПрж░ ржоржзрзНржпрзЗ ржбрж┐ржлрж╛рж░рзЗржирзНрж╕ ржХрзАред

// // JavaScript-ржП **call stack** ржЖрж░ **callback queue** рж╣рж▓рзЛ asynchronous behavior ржмрзЛржЭрж╛рж░ ржЬржирзНржп рж╕ржмржЪрзЗрзЯрзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржжрзБржЗржЯрж┐ ржЬрж┐ржирж┐рж╕ред ржирж┐ржЪрзЗ рж╕рж╣ржЬ ржмрж╛ржВрж▓рж╛рзЯ ржжрзБржЯрж╛рж░ ржкрж╛рж░рзНржержХрзНржп ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░ржЫрж┐:

// // ---

// // ## ЁЯФБ Call Stack (ржХрж▓ рж╕рзНржЯрзНржпрж╛ржХ)

// // ### тЬЕ ржХрзА?

// // **Call Stack** рж╣рж▓рзЛ ржПржХржЯрж╛ **stack data structure**, ржпрзЗржЦрж╛ржирзЗ ржлрж╛ржВрж╢ржиржЧрзБрж▓рзЛ **ржПржХржЯрж╛ ржПржХржЯрж╛ ржХрж░рзЗ ржЙржкрж░рзЗ ржЙржарж╛рзЯ** ржЖрж░ ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ **ржлрзЗрж░ржд ржирж┐рзЯрзЗ ржирзЗрзЯ**ред

// // ### ЁЯза ржХрж╛ржЬ ржХрзА?

// // * JavaScript ржпржЦржи ржХрзЛржирзЛ ржлрж╛ржВрж╢ржи рж░рж╛ржи ржХрж░рзЗ, рждржЦржи рж╕рзЗржЯрж╛ **call stack**-ржП ржпрж╛рзЯред
// // * ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ **ржкржк** рж╣рзЯрзЗ stack ржерзЗржХрзЗ ржмрзЗрж░ рж╣рзЯред

// // ### ЁЯУМ ржЙржжрж╛рж╣рж░ржг:

// // ```javascript
// // function one() {
// //   two();
// // }
// // function two() {
// //   console.log("Hello");
// // }
// // one();
// // ```

// // **Call Stack flow:**

// // ```
// // Global -> one() -> two() -> console.log()
// // ```

// // ---

// // ## тП│ Callback Queue (ржХрж▓ржмрзНржпрж╛ржХ ржХрж┐ржЙ)

// // ### тЬЕ ржХрзА?

// // **Callback Queue** рж╣рж▓рзЛ ржпрзЗржЦрж╛ржирзЗ **asynchronous ржлрж╛ржВрж╢ржирзЗрж░ ржХрж╛ржЬ (ржпрзЗржоржи setTimeout, fetch)** рж╢рзЗрж╖ рж╣рж▓рзЗ **рждрж╛ржжрзЗрж░ callback ржЧрзБрж▓рзЛ ржЬржорж╛ ржерж╛ржХрзЗ**, JavaScript call stack ржЦрж╛рж▓рж┐ рж╣ржУрзЯрж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЗред

// // ### ЁЯза ржХрж╛ржЬ ржХрзА?

// // * ржЗржнрзЗржирзНржЯ рж▓рзБржк **call stack ржЦрж╛рж▓рж┐ ржерж╛ржХрж▓рзЗ** callback queue ржерзЗржХрзЗ ржПржХрзЗ ржПржХрзЗ ржлрж╛ржВрж╢ржи ржирж┐рзЯрзЗ ржЖрж╕рзЗред
// // * ржПрж░ ржХрж╛ржЬ рж╣рж▓рзЛ **async ржлрж╛ржВрж╢ржи ржЧрзБрж▓рзЛ ржкрж░рзЗ ржЪрж╛рж▓рж╛ржирзЛ**ред

// // ---

// // ## ЁЯза ржЗржнрзЗржирзНржЯ рж▓рзБржк (Event Loop)

// // ржЗржнрзЗржирзНржЯ рж▓рзБржк **call stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗржЗ** callback queue ржерзЗржХрзЗ ржПржХржЯрж╛ ржлрж╛ржВрж╢ржи ржПржирзЗ ржЪрж╛рж▓рж╛рзЯред
// // ржПржЗ ржХрж╛рж░ржгрзЗ asynchronous ржХрзЛржб ржкрж░рзЗ ржЪрж▓рзЗред

// // ---

// // ## ЁЯЪА ржкрж╛рж░рзНржержХрзНржп ржПржХ ржиржЬрж░рзЗ:

// // | ржмрж┐рж╖рзЯ             | Call Stack                 | Callback Queue                    |
// // | ---------------- | -------------------------- | --------------------------------- |
// // | ржЧржаржи              | Stack (LIFO)               | Queue (FIFO)                      |
// // | ржХрж╛ржЬ              | ржлрж╛ржВрж╢ржи рж░рж╛ржи ржХрж░рж╛рж░ ржЬржирзНржп        | async ржлрж╛ржВрж╢ржирзЗрж░ callback ржЬржорж┐рзЯрзЗ рж░рж╛ржЦрж╛ |
// // | ржХржмрзЗ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ рж╣рзЯ | рж╕рж╛ржерзЗ рж╕рж╛ржерзЗржЗ (synchronously) | ржкрж░рзЗ, ржпржЦржи call stack ржЦрж╛рж▓рж┐ рж╣рзЯ       |
// // | ржХрзЗ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзЗ  | JavaScript engine          | ржЗржнрзЗржирзНржЯ рж▓рзБржк                        |

// // ---

// // ## ЁЯУМ ржЙржжрж╛рж╣рж░ржг (setTimeout ржжрж┐рзЯрзЗ ржмрзЛржЭрж╛):

// // ```javascript
// // console.log('1');

// // setTimeout(() => {
// //   console.log('2');
// // }, 0);

// // console.log('3');
// // ```

// // **ржЖржЙржЯржкрзБржЯ:**

// // ```
// // 1
// // 3
// // 2
// // ```

// // ЁЯФН ржХрж╛рж░ржг:

// // * `console.log('1')` тЖТ call stack-ржП ржЧрж┐рзЯрзЗ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ ржЪрж▓рзЗ ржпрж╛рзЯ
// // * `setTimeout(...)` тЖТ callback queue-рждрзЗ ржпрж╛рзЯ
// // * `console.log('3')` тЖТ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ ржЪрж▓рзЗ ржпрж╛рзЯ
// // * рждрж╛рж░ржкрж░ call stack ржЦрж╛рж▓рж┐ тЖТ callback queue ржерзЗржХрзЗ `console.log('2')` ржирзЗрзЯ

// // ---

// // ## тЬЕ ржЙржкрж╕ржВрж╣рж╛рж░:

// // * **Call Stack** тАФ рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ ржХрж╛ржЬрзЗрж░ ржЬржирзНржп
// // * **Callback Queue** тАФ ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ ржХрж╛ржЬ ржЬржорж┐рзЯрзЗ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп
// // * **Event Loop** тАФ call stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ callback queue ржерзЗржХрзЗ ржХрзЛржб ржПржирзЗ ржЪрж╛рж▓рж╛рзЯ

 


// // // //  ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржпржжрж┐ рж╕рж┐ржЩрзНржЧрзЗрж▓ ржерзНрж░рзЗржбрзЗржб рж╣рзЯ, рждрж╛рж╣рж▓рзЗ asynchronous ржХрж╛ржЬржЧрзБрж▓рзЛ ржХрзАржнрж╛ржмрзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗ?

// ржнрж╛рж▓ ржкрзНрж░рж╢рзНржи! ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ рж╕рж┐ржЩрзНржЧрзЗрж▓ ржерзНрж░рзЗржбрзЗржб рж╣рж▓рзЗржУ рж╕рзЗ ржЦрзБржмржЗ рж╕рзНржорж╛рж░рзНржЯ тАФ рж╕рзЗ **asynchronous ржХрж╛ржЬржЧрзБрж▓рзЛ ржирж┐ржЬрзЗ ржирж╛ ржХрж░рзЗ ржЕржирзНржпржжрзЗрж░ ржжрж┐рзЯрзЗ ржХрж░рж╛рзЯ**, ржЖрж░ рж╢рзЗрж╖рзЗ ржПрж╕рзЗ рж░рзЗржЬрж╛рж▓рзНржЯ ржирзЗрзЯред ржирж┐ржЪрзЗ рж╕рж╣ржЬржнрж╛ржмрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░ржЫрж┐:

// ---

// ## тЬЕ ржкрзНрж░ржержорзЗ ржмрзЛржЭрж╛ ржжрж░ржХрж╛рж░:

// **JavaScript рж╕рж┐ржЩрзНржЧрзЗрж▓ ржерзНрж░рзЗржбрзЗржб** ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ, рж╕рзЗ ржПржХржмрж╛рж░рзЗ ржПржХржЯрж╛ ржХрж╛ржЬржЗ ржХрж░рждрзЗ ржкрж╛рж░рзЗ тАФ call stack-ржП ржПржХрж╕рж╛ржерзЗ ржПржХрж╛ржзрж┐ржХ ржХрж╛ржЬ ржЪрж▓рзЗ ржирж╛ред

// рждрж╛рж╣рж▓рзЗ ржкрзНрж░рж╢рзНржи рж╣рж▓рзЛ...

// ---

// ## тЭУAsynchronous ржХрж╛ржЬ (ржпрзЗржоржи: `setTimeout`, `fetch`, `event listener`) ржХрзАржнрж╛ржмрзЗ ржЪрж▓рзЗ?

// ### ЁЯФз ржЖрж╕рж▓ ржХрж╛ржЬ ржХрж░рзЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ **Web APIs** ржмрж╛ Node.js ржПрж░ **libuv**

// ржЬрж╛ржнрж╛рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржпржЦржи async ржХрж╛ржЬ ржжрзЗржЦрзЗ, рждржЦржи рж╕рзЗ ржмрж▓рзЗ:

// > тАЬржПржЗ ржХрж╛ржЬ ржЖржорж┐ ржкрж░рзЗ ржХрж░ржм, рждрзБржорж┐ ржмрзНрж░рж╛ржЙржЬрж╛рж░ржХрзЗ ржжрж┐рзЯрзЗ ржХрж░рж╛ржУредтАЭ

// рждрж╛рж╣рж▓рзЗ, behind the scenes ржХрзА ржШржЯрзЗ?

// ---

// ## тЪЩя╕П ржХрж╛ржЬрзЗрж░ flow (step by step):

// ### ЁЯз╡ Step 1: JS call stack ржжрзЗржЦрзЗ async ржХрж╛ржЬ (ржпрзЗржоржи setTimeout)

// ```javascript
// setTimeout(() => {
//   console.log("Done");
// }, 2000);
// ```

// тЖТ **setTimeout** ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ **Web API**-ржХрзЗ ржжрж┐рзЯрзЗ ржжрзЗрзЯред

// ---

// ### тП▓я╕П Step 2: Web API ржХрж╛ржЬ ржЪрж╛рж▓рж╛рзЯ

// тЖТ Timer ржЧрзБржирзЗ **2000ms**ред

// тЖТ meantime, JavaScript ржЕржирзНржп ржХрзЛржб ржЪрж╛рж▓рж╛рждрзЗ ржерж╛ржХрзЗред

// ---

// ### ЁЯУе Step 3: Timer рж╢рзЗрж╖ рж╣рж▓рзЗ callback ржпрж╛рзЯ **Callback Queue**-рждрзЗ

// ---

// ### ЁЯФБ Step 4: **Event Loop** ржЪрзЗржХ ржХрж░рзЗ

// тЖТ ржпржжрж┐ call stack ржЦрж╛рж▓рж┐ ржерж╛ржХрзЗ, рждржмрзЗ callback queue ржерзЗржХрзЗ callback (ржпрзЗржоржи `console.log("Done")`) call stack-ржП ржкрж╛ржарж╛рзЯред

// ---

// ### тЬЕ Step 5: Call Stack callback ржЪрж╛рж▓рж╛рзЯ

// тЖТ ржПрж░ржкрж░ тАЬDoneтАЭ ржкрзНрж░рж┐ржирзНржЯ рж╣рзЯред

// ---

// ## ЁЯза ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзБржЭрж┐:

// ```javascript
// console.log("Start");

// setTimeout(() => {
//   console.log("Async");
// }, 0);

// console.log("End");
// ```

// ### ЁЯФО Output:

// ```
// Start
// End
// Async
// ```

// ЁЯСЙ ржпржжрж┐ржУ `setTimeout(..., 0)` ржжрж┐рзЯрзЗржЫрж┐, рждрж╛ржУ тАЬAsyncтАЭ рж╕ржмрж╛рж░ рж╢рзЗрж╖рзЗ ржЖрж╕рзЗред ржХрж╛рж░ржг:

// * setTimeout callback **Web API**-рждрзЗ ржпрж╛рзЯ,
// * 0ms ржкрж░ **Callback Queue**-рждрзЗ ржлрзЗрж░рзЗ,
// * рждрж╛рж░ржкрж░ **Event Loop** ржжрзЗржЦрзЗ call stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ ржЪрж╛рж▓рж╛рзЯред

// ---

// ## ЁЯФД ржЙржкрж╕ржВрж╣рж╛рж░:

// | ржмрж┐рж╖рзЯ                  | ржХрж╛ржЬ                                         |
// | --------------------- | ------------------------------------------- |
// | **JavaScript Engine** | рж╢рзБржзрзБ main thread ржЪрж╛рж▓рж╛рзЯ (call stack)         |
// | **Web APIs / libuv**  | async task ржЪрж╛рж▓рж╛рзЯ (setTimeout, fetch, I/O)   |
// | **Callback Queue**    | async callback ржЬржорж╛рзЯ                         |
// | **Event Loop**        | call stack ржЦрж╛рж▓рж┐ рж╣рж▓рзЗ queue ржерзЗржХрзЗ callback ржирзЗрзЯ |

// ---

// ## тЬЕ ржПржХ рж▓рж╛ржЗржирзЗ рж╕рж╛рж░рж╛ржВрж╢:

// **JavaScript ржирж┐ржЬрзЗ async ржХрж╛ржЬ ржирж╛ ржХрж░рзЗ, Web API ржжрж┐рзЯрзЗ ржХрж░рж╛рзЯ; ржЗржнрзЗржирзНржЯ рж▓рзБржк-ржПрж░ ржорж╛ржзрзНржпржорзЗ рж╕рзЗржЗ ржХрж╛ржЬ рж╢рзЗрж╖рзЗ callback ржирж┐рзЯрзЗ ржПрж╕рзЗ ржЪрж╛рж▓рж╛рзЯред**


