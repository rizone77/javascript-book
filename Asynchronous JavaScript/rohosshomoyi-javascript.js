
// // JIT compiled process ‡¶¨‡ßã‡¶ù‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™‡ßá‡¶∞ flowchart ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡•§
// // ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á! ‡¶®‡¶ø‡¶ö‡ßá **JIT (Just-In-Time) Compilation Process** ‡¶¨‡ßã‡¶ù‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ß‡¶æ‡¶™‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï flowchart ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø `Mermaid.js` ‡¶ï‡ßã‡¶° ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã‡•§ ‡¶è‡¶á ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø Markdown ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® GitHub, Obsidian, VS Code ‡¶è‡¶∞ Mermaid Preview Extension) flowchart ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§

// // ---

// // ### ‚úÖ Mermaid Flowchart Code (JIT Compilation Process)

// // ````markdown
// // ```mermaid
// // graph TD
// //   A[JavaScript Code] --> B[Parsing]
// //   B --> C[AST (Abstract Syntax Tree)]
// //   C --> D[Interpreter (Baseline Compilation)]
// //   D --> E[Bytecode Execution]
// //   E --> F{Hot Code?}
// //   F -- No --> G[Continue Interpreting]
// //   F -- Yes --> H[Optimize in JIT Compiler]
// //   H --> I[Machine Code]
// //   I --> J[Execute Optimized Code]
// //   J --> K{Is it still efficient?}
// //   K -- Yes --> L[Keep Using Optimized Code]
// //   K -- No --> M[De-optimize and go back to Interpreter]
// // ```
// // ````

// // ---

// // ### üìå ‡¶è‡¶á ‡¶´‡ßç‡¶≤‡ßã‡¶ö‡¶æ‡¶∞‡ßç‡¶ü‡ßá ‡¶ï‡ßÄ ‡¶¨‡ßã‡¶ù‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá:

// // | ‡¶ß‡¶æ‡¶™              | ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ                                                           |
// // | ---------------- | ------------------------------------------------------------------ |
// // | **Parsing**      | JS ‡¶ï‡ßã‡¶° AST-‡¶§‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶π‡ßü                                          |
// // | **Interpreter**  | ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá interpreter ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ï‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã ‡¶π‡ßü                        |
// // | **Hot Code**     | ‡¶ï‡ßã‡¶® ‡¶ï‡ßã‡¶° ‡¶Ö‡¶®‡ßá‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶≤‡ßá? ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶ø "hot"                              |
// // | **JIT Compiler** | Hot ‡¶ï‡ßã‡¶°‡¶ï‡ßá ‡¶Ö‡¶™‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßá‡¶∂‡¶ø‡¶® ‡¶ï‡ßã‡¶°‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßá                     |
// // | **De-optimize**  | ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶Ö‡¶™‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡¶° ‡¶ï‡ßã‡¶° ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ, ‡¶§‡¶ñ‡¶® interpreter-‡¶è ‡¶´‡ßá‡¶∞‡¶§ ‡¶®‡ßá‡ßü |



// ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá Memory management ‡¶è‡¶¨‡¶Ç garbage collection ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§


// ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá **Memory Management** ‡¶è‡¶¨‡¶Ç **Garbage Collection** ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßã‡¶ù‡¶æ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶≤‡¶ø‡¶ï (memory leak) ‡¶®‡¶æ ‡¶π‡ßü‡•§

// ---

// ## üß† ‡ßß. JavaScript Memory Management ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá?

// JavaScript-‡¶è ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶§‡¶ø‡¶® ‡¶ß‡¶æ‡¶™‡ßá ‡¶π‡ßü:

// ### ‚úÖ ‡ßß. Allocate (‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶¨‡¶∞‡¶æ‡¶¶‡ßç‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ)

// ‡¶Ø‡¶ñ‡¶® ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤, ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã, ‡¶§‡¶ñ‡¶® ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ ‡¶¨‡¶∞‡¶æ‡¶¶‡ßç‡¶¶ ‡¶¶‡ßá‡ßü‡•§

// ```js
// let name = "Rakib"; // Allocate memory for string "Rakib"
// let user = { name: "Ali" }; // Allocate memory for object
// ```

// ---

// ### ‚úÖ ‡ß®. Use (‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞)

// ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ö‡¶≤‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶á ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤/‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§

// ```js
// console.log(user.name); // memory is being used
// ```

// ---

// ### ‚úÖ ‡ß©. Release (‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶´‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ - Garbage Collection)

// ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶¨‡¶æ ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶Ü‡¶∞ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ, ‡¶§‡¶ñ‡¶® ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶§‡¶æ‡¶ï‡ßá **"garbage"** ‡¶Æ‡¶®‡ßá ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡ßü‡•§ ‡¶è‡¶ï‡ßá ‡¶¨‡¶≤‡ßá **Garbage Collection**‡•§

// ---

// ## üßπ ‡ß®. Garbage Collection ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá?

// JavaScript-‡¶è‡¶∞ ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶® V8) ‡¶ó‡¶æ‡¶∞‡ßç‡¶¨‡ßá‡¶ú ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶ï‡¶∞‡ßá **"mark-and-sweep"** ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶ó‡¶∞‡¶ø‡¶¶‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá:

// ### üîç Mark-and-Sweep Algorithm:

// 1. **Mark**: ‡¶ú‡¶æ‡¶≠‡¶æ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶∏‡¶¨ **reachable (‡¶™‡ßå‡¶Å‡¶õ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡ßü ‡¶è‡¶Æ‡¶®)** ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤/‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá‡•§
// 2. **Sweep**: ‡¶Ø‡ßá‡¶ó‡ßÅ‡¶≤‡ßã unreachable (‡¶ï‡¶æ‡¶∞‡ßã ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ), ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡ßü‡•§

// ```js
// let a = { name: "A" };
// let b = a; // a ‡¶è‡¶¨‡¶Ç b ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶è‡¶ï‡¶á ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
// a = null;  // ‡¶è‡¶ñ‡¶®‡ßã b ‡¶Ü‡¶õ‡ßá, ‡¶§‡¶æ‡¶á ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ó‡¶æ‡¶∞‡ßç‡¶¨‡ßá‡¶ú ‡¶π‡ßü‡¶®‡¶ø
// b = null;  // ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶∞ ‡¶ï‡ßá‡¶â ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶æ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶®‡¶æ ‚áí Garbage
// ```

// ---

// ## ‚ùó ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶≤‡¶ø‡¶ï ‡¶ï‡¶ñ‡¶® ‡¶π‡ßü?

// ‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßã‡¶® ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶è‡¶ñ‡¶®‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßá‡¶õ‡ßá, ‡¶§‡¶ñ‡¶® ‡¶∏‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶ó‡¶æ‡¶∞‡ßç‡¶¨‡ßá‡¶ú ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡ßç‡¶ü‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶®‡¶æ‡•§ ‡¶è‡¶ï‡ßá‡¶á ‡¶¨‡¶≤‡ßá **memory leak**‡•§

// ```js
// let leaky = {};
// function leak() {
//   leaky.bigData = new Array(1000000).fill("leak"); // leaky ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ø‡¶æ‡ßü
// }
// ```

// ---

// ## ‚úÖ ‡¶â‡¶™‡¶∏‡¶Ç‡¶π‡¶æ‡¶∞

// | ‡¶¨‡¶ø‡¶∑‡ßü                   | ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ                                                          |
// | ---------------------- | ----------------------------------------------------------------- |
// | **Memory Allocation**  | ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤/‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶≤‡ßá‡¶á ‡¶¨‡¶∞‡¶æ‡¶¶‡ßç‡¶¶ ‡¶π‡ßü                              |
// | **Garbage Collection** | Unused ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßá                                   |
// | **Best Practice**      | ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶∂‡ßá‡¶∑‡ßá ‡¶¨‡ßú ‡¶°‡ßá‡¶ü‡¶æ `null` ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì ‡¶¨‡¶æ `let`/`const` scope-‡¶è ‡¶∞‡¶æ‡¶ñ‡ßã |

// ---







